<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>蓝桥软件学院</title>
    <link>https://lanqiao2016.github.io</link>
    <description>My personal blog</description>
    
      <item>
        <title>面试题精华之持久层</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview9-persist.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview9-persist.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;PreparedStatement和Statement有什么区别？&lt;/td&gt;
      &lt;td&gt;性能？安全？sql注入？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;你用过哪些连接池？怎么用的。&lt;/td&gt;
      &lt;td&gt;连接池解决了什么问题？有什么好处？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;jdbc操作数据的基本步骤是什么？&lt;/td&gt;
      &lt;td&gt;finally里面写什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;配置Mybatis的基本步骤是什么？&lt;/td&gt;
      &lt;td&gt;有哪些核心类（工厂）需要配置？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;Mybatis中如何做参数映射？&lt;/td&gt;
      &lt;td&gt;mapper文件的sql命令中如何获得入参的属性？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;如果映射接口的方法有多个参数，怎么取得这些参数及其属性？&lt;/td&gt;
      &lt;td&gt;@Param是什么意思？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;如何做结果映射？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;#{…} 和 ${…} 的区别&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;如何获取自动生成的(主)键值?&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之SpringMVC</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview8-SpringMVC.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview8-SpringMVC.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;web项目中怎么接入SpringMVC？&lt;/td&gt;
      &lt;td&gt;DispatcherServlet 有什么作用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;*-mvc.xml中主要配置哪些内容？&lt;/td&gt;
      &lt;td&gt;如何配置注解方式的控制器管理？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;如何访问到静态的文件,如jpg,js,css&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;@ModelAttribute的含义及用法。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;如何将url映射至控制器的方法？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;如何获取url路径中的变量？&lt;/td&gt;
      &lt;td&gt;@PathValue和@RequestParam有什么区别？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;控制器的方法怎么获得表单数据？你有多少种方式？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;handler方法如何向模板视图共享数据？&lt;/td&gt;
      &lt;td&gt;Model的含义。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;handler方法如何直接输出JSON&lt;/td&gt;
      &lt;td&gt;怎么处理Ajax请求？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;你在项目中把jsp放在什么目录下？&lt;/td&gt;
      &lt;td&gt;放在webapp下和放在WEB-INF下有什么区别？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;WEB-INF/views&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;如何给控制器注入spring管理的其他bean？&lt;/td&gt;
      &lt;td&gt;注入方式？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;***spring mvc 如何实现全局的异常处理?&lt;/td&gt;
      &lt;td&gt;提示：@ControllerAdvice&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;***用过spring-mvc的restful风格吗？怎么用的？&lt;/td&gt;
      &lt;td&gt;你怎么理解restful web service？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;restful service如何解决回话跟踪？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;简单的谈一下SpringMVC的工作流程？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之Spring</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview7-spring.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview7-spring.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;SpringIOC容器解决了什么问题？&lt;/td&gt;
      &lt;td&gt;什么是IOC&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;什么是DI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;注入方式有哪几种？请分别介绍！&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;什么是spring-mvc的双亲上下文？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;你是采用注解还是xml来配置bean及其依赖的？&lt;/td&gt;
      &lt;td&gt;有哪些注解可以被Spring识别？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;@Controller @Service @Repostory @Component分别是什么含义？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;什么是自动注入？&lt;/td&gt;
      &lt;td&gt;按类型自动注入可能会出现什么问题？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;用注解方式声明bean的时候，bean的id是什么？&lt;/td&gt;
      &lt;td&gt;如何自定义注解声明的bean的ID？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;如何在用@Resource时明确指定bean的id？@Qualifier的含义是什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;AOP是什么概念，有什么用？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;你知道有哪些配置AOP的方式？能说多少说多少。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之工具</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview6-tools.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview6-tools.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;你都读过哪些技术书籍&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;你经常访问哪些技术网站&lt;/td&gt;
      &lt;td&gt;介绍一下你为什么喜欢逛这个网站&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;你所遵循的编码规范是什么？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;你都知道哪些设计模式？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;如何写出一个线程安全的单例模式？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;一个项目中常见的文档有哪些？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;你的近期目标是什么&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;用什么工具做版本控制&lt;/td&gt;
      &lt;td&gt;svn、git&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;项目构建工具&lt;/td&gt;
      &lt;td&gt;maven、ant&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;请描述下你参与的项目的开发流程&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;如何进行单元测试？ 	有哪些注解？如何在所有方法执行之前（之后）执行同一个方法？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之数据库</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview5-db.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview5-db.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;sql中如何控制事务？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;jdbc中如何控制事务？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;hibernate中如何控制事务？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;如何利用spring控制事务？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;如何提升sql查询效率？ 索引的概念及作用是什么？可以加索引的列需要具备什么条件？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;有哪些约束？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;事务的特点是什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;如何做连接查询？  	N个表连接需要多少个连接条件？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;请描述oracle分页语句！&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;sql语句包含哪些类型？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;内连接、外连接有什么区别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;什么是存储过程？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;什么是视图？有什么作用？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;请说出一些数据库优化方面的经验	  “1、使用预处理 2、擅用索引 3、有外键约束会影响插入和删除性能，如果程序能够保证数据的完整性，那在设计数据库时就去掉外键 4、使用预编译缓存，保证良好的sql格式”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;truncate和delete命令有什么区别？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;*三大范式指的是什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;务必配合sql笔试题，强化sql分析能力！！！&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之Servlet&JSP</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview4-Servlet.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview4-Servlet.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;请描述Servlet容器的作用？&lt;/td&gt;
      &lt;td&gt;其基本的工作流程是什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;请解释Jsp和Servlet的联系与区别&lt;/td&gt;
      &lt;td&gt;Servlet的执行过程\Jsp的执行过程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;请解释转发与重定向的区别&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;请解释get请求和post请求的区别&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;有时候需要把请求参数转换为非String类型，如int类型，你是怎么做的？&lt;/td&gt;
      &lt;td&gt;这中间容易出现什么异常？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;你是怎么解决乱码问题的？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;你是怎么实现文件上传的？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;你在什么情况下使用过Session？完成了什么功能？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;什么是MVC？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;如何对代码进行分层？&lt;/td&gt;
      &lt;td&gt;有哪些层？每个层是什么含义？如何解除各层级之间的耦合？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;请解释Cookie与Session的联系与区别。&lt;/td&gt;
      &lt;td&gt;如何实现记住用户名或者记住密码这个功能？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;如何用C-Foreach标签配合el表达式生成一个页面上的表格？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;你用Filter完成过什么功能？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;你用Listener完成过什么功能？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;jsp有哪些常用内置对象？	挑选其中一些内置对象问其含义！&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;include指令和jsp:include有什么区别？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;哪些数据可以共享在session当中（session资源是比较宝贵的）？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;18&lt;/td&gt;
      &lt;td&gt;哪些数据可以共享在application中？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;19&lt;/td&gt;
      &lt;td&gt;Servlet是不是线程安全的？&lt;/td&gt;
      &lt;td&gt;针对线程安全问题，使用Servlet需要注意些什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;21&lt;/td&gt;
      &lt;td&gt;你希望表单提交的时候某个值被提交，但是不希望它显示在页面上，你会怎么做？&lt;/td&gt;
      &lt;td&gt;（隐藏域）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;22&lt;/td&gt;
      &lt;td&gt;用什么方式让Servlet返回json字符串，而不是跳转页面？&lt;/td&gt;
      &lt;td&gt;考察输出流&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;23&lt;/td&gt;
      &lt;td&gt;404错误是什么含义？&lt;/td&gt;
      &lt;td&gt;如何配置界面友好的404页面？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;24&lt;/td&gt;
      &lt;td&gt;500错误是什么含义？&lt;/td&gt;
      &lt;td&gt;如何配置界面友好的500页面？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;tomcat的端口可以在哪个文件中修改？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;26&lt;/td&gt;
      &lt;td&gt;Servlet3.0用哪个注解标注Servlet&lt;/td&gt;
      &lt;td&gt;如何用注解给Servlet指定初始化参数？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;请描述利用mvc思维完成一个单表增删改差的思路！&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;28&lt;/td&gt;
      &lt;td&gt;jdbc连接数据库的基本步骤是什么？请说出伪代码！&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;29&lt;/td&gt;
      &lt;td&gt;PreparedStatement和Statement有什么区别？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;30&lt;/td&gt;
      &lt;td&gt;请总结web.xml可以配置哪些东西&lt;/td&gt;
      &lt;td&gt;首页、监听、Servlet、Filter、统一的错误展示页面&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;31&lt;/td&gt;
      &lt;td&gt;HTTP响应状态码常见的有哪些？是什么含义？&lt;/td&gt;
      &lt;td&gt;200、404、500、401、403……&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之jQuery</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview3-jQuery.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview3-jQuery.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
      &lt;th&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;请解释$符号的含义，可以用什么来替代&lt;/td&gt;
      &lt;td&gt;jQuery&lt;/td&gt;
      &lt;td&gt;怎么做到在文档加载完成后执行一些js代码。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;jQuery常用选择器有哪些？&lt;/td&gt;
      &lt;td&gt;怎么选择单双行？多层选择器&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;一个页面上有多个p标签，如何遍历他们并依次弹出其文本内容&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;如何让一个元素的css在两个类之间切换&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;如何用代码为元素添加事件？&lt;/td&gt;
      &lt;td&gt;onclick=“”,之外有什么办法？&lt;/td&gt;
      &lt;td&gt;事件的回调函数，都可以有一个event参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;你知道哪些事件？说出其单词。&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;你有多少种办法发起一个ajax请求&lt;/td&gt;
      &lt;td&gt;getJSON、get、post、ajax、load&lt;/td&gt;
      &lt;td&gt;有什么区别和共同点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;详细描述你做过的一个jQuery的ajax请求的业务场景和代码！&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;如何强制ajax请求为同步请求？&lt;/td&gt;
      &lt;td&gt;什么是同步？什么是异步？&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;getJSON函数的作用及用法&lt;/td&gt;
      &lt;td&gt;load函数的作用及用法&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;用过easyui的哪些控件&lt;/td&gt;
      &lt;td&gt;请详细描述datagrid的用法&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;jQuery如何在一个元素的最后一个儿子节点后插入一个节点？&lt;/td&gt;
      &lt;td&gt;顺便问问：append、appendTo、insert和insertBefore&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;用过哪些jQuery插件，请描述它们的作用&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;现场写出json表示一个老师对象，有name,age,students三个属性，其中students是含三个学生对象（也有name，age属性）的数组&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之Web前端</title>
        <link>https://lanqiao2016.github.io/2016/08/01/interview2-webfront.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/interview2-webfront.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;问题&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;请解释盒子模型。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;css的float属性的含义和作用是什么？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;css选择器有哪些？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;什么是内联样式？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;现在需要用js来对表单进行验证，请说出实现思路。（伪代码级别）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;在注册时，用户填写完用户名，失去焦点时对用户名进行已存在验证，请说出实现思路。（伪代码级别）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;N张图片以1秒的间隔进行轮播，请说出实现思路。（伪代码级别）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;百度输入框的自动补全（提示列表）的实现思路是什么？（伪代码级别）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;省市区三级联动下啦列表的实现思路是什么？（伪代码级别）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;需要为一个表格添加单双行背景色不同的样式，如何用js来实现？（伪代码级别）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>课程简介</title>
        <link>https://lanqiao2016.github.io/2016/08/01/introduction.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/introduction.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;java&quot;&gt;认识Java&lt;/h1&gt;
&lt;p&gt;本文将介绍 Java 体系和 Java 的核心概念：JVM、JDK、JRE。同时我们会学到如何在 windows 系统中搭建 Java 开发环境，以及如何利用第三方工具进行 Java 程序的开发。并且在这一章里我们会先接触 Java 的第一个程序 Hello World！让我们一起进入 Java 语言的神奇世界吧！&lt;/p&gt;

&lt;h2 id=&quot;java--&quot;&gt;Java 简介 [了解]&lt;/h2&gt;
&lt;p&gt;Java 是一种面向对象的语言。于1995年，由 Sun 公司出品。虽然 Java 仅仅只产生了短短20年，但是它的发展是非常迅速的。在2009年4月20号，ORACLE 收购了 Sun 公司，也就是说 Java 这门语言现在归属于 ORACLE 这家公司门下。&lt;/p&gt;

&lt;p&gt;在 Java 这门语言体系当中，最基础的部分就是 Java SE 部分，Java 的标准版本。它包括Java最基础的一些结构，包括面向对象的一些特性等等，同时它也是 Java 技术基础和核心。在 Java SE 的基础之上，又分为了 Java EE（Java 的企业版），应用于大型企业级应用的开发。Java ME 主要用于嵌入式开发。&lt;/p&gt;

&lt;p&gt;Java的三个体系：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-1&quot;&gt;Java语言的特点[了解]&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;简洁有效&lt;/li&gt;
  &lt;li&gt;可移植性&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;解释型&lt;/li&gt;
  &lt;li&gt;适合分布式计算&lt;/li&gt;
  &lt;li&gt;拥有较好的性能&lt;/li&gt;
  &lt;li&gt;健壮、防患于未然&lt;/li&gt;
  &lt;li&gt;具有多线程处理能力&lt;/li&gt;
  &lt;li&gt;具有较高的安全性&lt;/li&gt;
  &lt;li&gt;是一种动态语言&lt;/li&gt;
  &lt;li&gt;是一种中性结构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不详细解释，这些特性最好是学完java之后再回过头来深入探索和总结。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本工作原理【掌握】&lt;/h2&gt;
&lt;p&gt;在Java编程语言中，所有源码最初都用普通文本书写，并保存在后缀为.java的文本文件中。&lt;/p&gt;

&lt;p&gt;进一步，源码文件被编译为.class文件——使用“编译器（Java Compiler）”。&lt;/p&gt;

&lt;p&gt;.class文件并不能被处理器（CPU）直接处理——它是java虚拟机（JVM）的机器语言。&lt;/p&gt;

&lt;p&gt;Java需要启动一个JVM实例来装载和运行.class文件中的字节码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为虚拟机在不同操作系统上有不同的版本，所以.class文件可以在不同操作系统平台上被解释执行，换句话说，通过虚拟机同一个应用程序可以在不同的操作系统平台上运行，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;javajava-platform&quot;&gt;Java平台（Java Platform）&lt;/h2&gt;
&lt;p&gt;Java平台是只有软件的平台，它运行在硬件平台之上。包含两部分内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java虚拟机&lt;/li&gt;
  &lt;li&gt;Java API（application Programming Interface）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虚拟机的作用，前面有简单介绍；
API是一组庞大的构建好的组件的集合，它提供基础的、非常有用的功能，可以被应用程序直接使用。在Java中，这些组件是一个个的类（.class），他们按相关性被划分到不同的包（package）中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.4.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jdkjrejvm&quot;&gt;JDK、JRE与JVM&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JDK&lt;/strong&gt; 叫 Java 开发工具包，基本功能是编译Java源码，对应命令为javac
&lt;strong&gt;JRE&lt;/strong&gt; 叫 Java 运行环境，基本功能是启动虚拟机，对应命令为java
&lt;strong&gt;JVM&lt;/strong&gt; 叫 Java 虚拟机，是运行java程序的程序&lt;/p&gt;

&lt;p&gt;以上三部分都可以通过安装JDK一次性获得。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>第一个Java应用程序</title>
        <link>https://lanqiao2016.github.io/2016/08/01/grammar.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/08/01/grammar.html</guid>
        <pubDate>Mon, 01 Aug 2016 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;java-&quot;&gt;Java 基础语法&lt;/h1&gt;
&lt;p&gt;一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类&lt;/strong&gt;：类是一个模板，它描述一类对象的行为和状态。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;实例变量&lt;/strong&gt;：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##基本语法
编写Java程序时，应注意以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;大小写敏感&lt;/strong&gt;：Java是大小写敏感的，这就意味着标识符Hello与hello是不同的。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类名&lt;/strong&gt;：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;方法名&lt;/strong&gt;：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;源文件名&lt;/strong&gt;：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记Java是大小写敏感的），文件名的后缀为.java。（如果文件名和类名不相同则会导致编译错误）。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;主方法入口&lt;/strong&gt;：所有的Java 程序由public static void main(String []args)方法开始执行
##Java标识符
Java所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。
关于Java标识符，有以下几点需要注意：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;所有的标识符都应该以字母（A-Z或者a-z）,美元符（$）、或者下划线（_）开始&lt;/li&gt;
  &lt;li&gt;首字符之后可以是任何字符的组合&lt;/li&gt;
  &lt;li&gt;关键字不能用作标识符&lt;/li&gt;
  &lt;li&gt;标识符是大小写敏感的&lt;/li&gt;
  &lt;li&gt;合法标识符举例：age、$salary、_value、__1_value&lt;/li&gt;
  &lt;li&gt;非法标识符举例：123abc、-salary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;##Java修饰符
像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可访问修饰符 : default, public , protected, private&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不可访问修饰符 : final, abstract, strictfp
在后面的章节中我们会深入讨论Java修饰符。
##Java变量
Java中主要有如下几种类型的变量&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;局部变量&lt;/li&gt;
  &lt;li&gt;类变量（静态变量）&lt;/li&gt;
  &lt;li&gt;成员变量（非静态变量）
##Java数组
数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。
##Java枚举
Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的bug。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。
#实例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class FreshJuice {
   enum FreshJuiceSize{ SMALL, MEDUIM, LARGE }
   FreshJuiceSize size;
}

public class FreshJuiceTest {
   public static void main(String []args){
      FreshJuice juice = new FreshJuice();
      juice.size = FreshJuice. FreshJuiceSize.MEDUIM ;
   }
} ***注意：枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。***
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;#Java关键字&lt;/p&gt;

&lt;p&gt;下面列出了Java保留字。这些保留字不能用于常量、变量、和任何标识符的名称。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>面试题精华之Java基础</title>
        <link>https://lanqiao2016.github.io/2016/07/31/interview1-java.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/31/interview1-java.html</guid>
        <pubDate>Sun, 31 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;编号&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;问题&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;扩展&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请解释java跨平台机制&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;有哪些基本数据类型？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基本数据类型和引用类型有什么区别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“你了解哪些排序算法？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请说明二分查找法的基本思路。”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请现场写出冒泡排序或选择排序。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“String和StringBuilder有什么区别？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;什么叫String对象不可变？”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请解释面向对象三大特性。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;抽象类和接口的特征以及区别是什么？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请现场写出一个单例模式。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;你了解工厂模式吗？请简单说明？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请分别解释重写和重载？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;返回值类型是否可用于区分重载？	重写过程中能不能缩小方法的可见范围？	重写中，子类的方法能不能声明比父类更多的异常？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;==和equals的区别&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;12&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;final关键字都能用在哪些地方，分别是什么含义&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;13&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;类变量（static）和实例变量的区别&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;14&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;访问权限修饰符都有哪些？含义是什么？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请说明protected成员的可见范围&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;error和exception的区别是什么？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;17&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;运行时异常和检查期异常有什么区别&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;18&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;至少说出三中检查期异常&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;19&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;至少说出五种运行时异常&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Set和List有什么区别&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;21&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ArrayList和LinkedList的实现机制是什么？分别有什么优缺点？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;22&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;什么时候重写equals和hashCode&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重写的思路是什么？什么时候使用Comparable和Comparator接口？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;23&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;泛型有什么作用？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;24&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;队列和栈有什么特点？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;常见的数据结构有哪些？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;26&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HashMap和TreeMap有什么区别？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;27&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;IO流的分类及特点&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“Serializable序列化接口的作用？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;什么是对象序列化？”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;29&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;什么是包装流？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;常见的包装流有哪些？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;30&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在本机拷贝一个文件到别处，你的代码思路是什么？说出伪代码这个级别！&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;怎么判断读到了文件的末尾？	如何使用缓冲流？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;31&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;xml解析方式有几种？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;或者回答以dom形式解析xml的思路。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Class的含义是什么？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;33&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;获取Class对象有哪些方式？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;如何使用反射创建实例？如何使用反射动态调用方法？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;34&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;什么是线程？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;线程和进程有什么区别？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;35&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;实现线程的两种方式及其区别。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;36&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;线程生命周期中的各种状态及状态间的转换。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请解释synchronized关键词的含义wait和notify的含义和作用。wait和sleep有什么区别？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;37&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;你认为注解有什么作用？&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;你都用到过哪些注解？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;38&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;你在项目中是如何使用单元测试的？	你使用的是jUnit3还是jUnit4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;使用过哪些断言	jUnit4几个注解的执行顺序，如beforeClass标注的方法何时执行？&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;39&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“给定一个存有多个工程师对象的集合，用户可选择输出方式，例如按薪酬高低顺序或逆序输出，按入职时间顺序或逆序输出。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请说出实现思路。（伪代码级别）”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;“有一个工程师管理系统，能存储若干个工程师的信息，要求程序下次启动时能自动加载上一次保存的数据。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;请问你的实现思路是什么？（伪代码级别）”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
      </item>
    
      <item>
        <title>第一个Java应用程序</title>
        <link>https://lanqiao2016.github.io/2016/07/31/helloworld.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/31/helloworld.html</guid>
        <pubDate>Sun, 31 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;javahelloworld&quot;&gt;第一个Java应用程序：HelloWorld&lt;/h1&gt;

&lt;p&gt;开发并运行一个Java程序主要有三步：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;编写&lt;/strong&gt;Java的源代码文件，以.java结尾，&lt;strong&gt;源代码文件默认是不能被机器执行的&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;特别注意，在windows上新建文本文件默认会得到一个.txt文件，需要将其改为.java后缀；如果文件名显示设置中隐藏了文件后缀，新建一个文本文件看不到后缀，但事实上有.txt后缀，如果此时仅把文件命名为***.java实际得到的文件是***.java.txt。这将导致下一个步骤的编译错误&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用编译器（也就是javac命令），对源代码文件进行&lt;strong&gt;编译&lt;/strong&gt;。把它编译成字节码文件，字节码文件是以.class结尾。它与平台无关，也就是说无论你是windows还是linux，字节码文件都是这样的一个文件，这跟系统没有关系。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;运行&lt;/strong&gt;应用程序（使用java命令），在控制台我们可以看到程序运行出的结果。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;看看打印单词 Hello World 的简单代码。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class MyFirstJavaProgram {

	/* This is my first java program.  
	 * This will print 'Hello World' as the output
	 */
	public static void main(String []args) {
		System.out.println(&quot;Hello World&quot;); // prints Hello World
	}
}  看下面是如何保存文件，编译并运行该程序。请按照以下步骤进行：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;打开记事本，并添加如上面的代码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将文件另存为：MyFirstJavaProgram.java。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开命令提示符窗口，然后去进入保存类的目录。假设它是C：。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入’javac MyFirstJavaProgram.java“，然后按回车来编译代码。如果代码中没有错误，在命令提示符下将到下一行（假设：路径变量设置）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现在，输入“java MyFirstJavaProgram’来运行程序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将可以看到 ‘ Hello World ‘ 印在窗口上。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  C : &amp;gt; javac MyFirstJavaProgram.java
  C : &amp;gt; java MyFirstJavaProgram 
  Hello World
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Git常用命令速查表</title>
        <link>https://lanqiao2016.github.io/2016/07/30/Git-Resources.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/30/Git-Resources.html</guid>
        <pubDate>Sat, 30 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;master: 默认开发分支&lt;/p&gt;

&lt;p&gt;origin: 默认远程版本库&lt;/p&gt;

&lt;p&gt;Head: 默认开发分支&lt;/p&gt;

&lt;p&gt;Head^: Head的父提交&lt;/p&gt;

&lt;p&gt;###创建版本库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone &amp;lt;url&amp;gt;   #克隆远程版本库
$ git init          #初始化本地版本库
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###修改和提交&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status        #查看状态
$ git diff          #查看变更内容
$ git add .         #跟踪所有改动过的文件
$ git add &amp;lt;file&amp;gt;    #跟踪指定的文件
$ git mv &amp;lt;old&amp;gt;&amp;lt;new&amp;gt; #文件改名
$ git rm&amp;lt;file&amp;gt;      #删除文件
$ git rm --cached&amp;lt;file&amp;gt;            #停止跟踪文件但不删除
$ git commit -m &quot;commit messages&quot;  #提交所有更新过的文件
$ git commit --amend               #修改最后一次改动
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###查看提交历史&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git log                    #查看提交历史
$ git log -p &amp;lt;file&amp;gt;          #查看指定文件的提交历史
$ git blame &amp;lt;file&amp;gt;           #以列表方式查看指定文件的提交历史
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###撤销&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset --hard HEAD      #撤销工作目录中所有未提交文件的修改内容
$ git checkout HEAD &amp;lt;file&amp;gt;   #撤销指定的未提交文件的修改内容
$ git revert &amp;lt;commit&amp;gt;        #撤销指定的提交
$ git log --before=&quot;1 days&quot;  #退回到之前1天的版本 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###分支与标签&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch                   #显示所有本地分支
$ git checkout &amp;lt;branch/tag&amp;gt;    #切换到指定分支和标签
$ git branch &amp;lt;new-branch&amp;gt;      #创建新分支
$ git branch -d &amp;lt;branch&amp;gt;       #删除本地分支
$ git tag                      #列出所有本地标签
$ git tag &amp;lt;tagname&amp;gt;            #基于最新提交创建标签
$ git tag -d &amp;lt;tagname&amp;gt;         #删除标签
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###合并与衍合&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git merge &amp;lt;branch&amp;gt;        #合并指定分支到当前分支
$ git rebase &amp;lt;branch&amp;gt;       #衍合指定分支到当前分支
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###远程操作&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git remote -v                   #查看远程版本库信息
$ git remote show &amp;lt;remote&amp;gt;        #查看指定远程版本库信息
$ git remote add &amp;lt;remote&amp;gt; &amp;lt;url&amp;gt;   #添加远程版本库
$ git fetch &amp;lt;remote&amp;gt;              #从远程库获取代码
$ git pull &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;      #下载代码及快速合并
$ git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;      #上传代码及快速合并
$ git push &amp;lt;remote&amp;gt; :&amp;lt;branch/tag-name&amp;gt;  #删除远程分支或标签
$ git push --tags                       #上传所有标签
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###资料链接
1. &lt;a href=&quot;https://try.github.io/levels/1/challenges/1&quot;&gt;Try Git&lt;/a&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>JavaEE全栈技术概念手册</title>
        <link>https://lanqiao2016.github.io/2016/07/30/fullstack-concept.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/30/fullstack-concept.html</guid>
        <pubDate>Sat, 30 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;本文档旨在向读者介绍JavaEE全栈技术的概貌，分别介绍以下内容：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack1.png&quot; alt=&quot;典型技全栈术模型&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;客户层&lt;/h2&gt;
&lt;p&gt;客户层负责展现ui，用户交互，向web层发起请求（携带请求参数），Web层负责向客户层输出数据（整个html或者html片段，或者json，或者xml）。客户端主要有浏览器、&lt;strong&gt;手机应用、其他移动设备、其他系统&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;浏览器&lt;/h3&gt;
&lt;p&gt;浏览器运行html，相关的技术有：html、css和js。Html由标签组成，用于描述页面上的元素及展现方式，可以选择h4或者h5，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot;&gt;参考文档&lt;/a&gt;。Css用于描述页面元素的样式（如颜色、大小、边距、位置），也有新的版本，css3，&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot; title=&quot;css参考文档&quot;&gt;CSS&lt;/a&gt;。Js（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot;&gt;JavaScript&lt;/a&gt;）是一种编程语言，之前主要运行在浏览器上，由浏览器提供js引擎负责对js进行解释和执行，主要负责提升页面的交互能力，可以让页面动起来（最典型的就是弹窗）。&lt;/p&gt;

&lt;p&gt;Css 框架：原始的html基本上就是黑白+框，css可以美化html，但是对于编程人员来讲，多数不擅长美化工作，好在业界出现了像&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter Bootstrap&lt;/a&gt;这样优秀的css框架。它提供了便捷的布局方式（改进了div+css布局），所有页面元素的默认美化样式，ui组建的基本交互，还接受各种ui插件（ui、样式和交互）。
Js框架：同样，原始的js开发效率较低，为完成一个简单的交互需要写多行代码，js框架的作用就是提供更简单、更强大的API。首推&lt;a href=&quot;http://www.jquery.com/&quot;&gt;JQuery&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;移动设备&lt;/h3&gt;
&lt;p&gt;安卓程序：有一套自己的ui及交互方式&lt;/p&gt;

&lt;p&gt;ios程序：有一套自己的ui及交互方式&lt;/p&gt;

&lt;p&gt;H5程序：有一套自己的ui及交互方式&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;其他系统&lt;/h3&gt;
&lt;p&gt;不确定是否有ui，不确定其技术。Web层只负责提供API，典型地返回json或者xml，对客户层的具体表现不知道。&lt;/p&gt;

&lt;h2 id=&quot;web&quot;&gt;Web层&lt;/h2&gt;

&lt;h3 id=&quot;javaee&quot;&gt;JavaEE&lt;/h3&gt;

&lt;p&gt;受&lt;a href=&quot;https://jcp.org/aboutJava/communityprocess/final/jsr316/index.html&quot;&gt;JavaEE规范&lt;/a&gt;约束。编程要使用&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/&quot;&gt;JavaEE-API&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Web server：web层首先要有一个运行的server，接收来自客户端的请求，找到相关资源，并按客户端要求的媒体类型进行返回。它的工作围绕请求和响应展开。请求和响应都需要协议，现在的主流协议是http（还有别的协议如ftp）。http对url、请求报文、响应报文都做出了严格的规定。&lt;/p&gt;

&lt;p&gt;Web server只负责基本的消息的收发，不负责具体业务的处理，因为业务是千变万化的。因此这里也体现了“分离”的编程思维。Web server可以不处理业务，但是能“安装”处理业务的程序，web server能根据请求找到这些程序并运行它，由程序直接返回结果，或者结果返回给server，server经过处理再返回给客户端。&lt;/p&gt;

&lt;p&gt;因此，有时候我们也称web server为web容器(web container)——容纳handler(具体指JSP Servlet)的容器。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Java世界里面的web server主要有免费的tomcat和商业的weblogic、websphere等。&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;Tomcat&lt;/a&gt;是业界主流。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;既然web server已经有人实现了，现在的重点就是编程人员要实现也有处理程序，实现好了，“安装”到server即可。&lt;/p&gt;

&lt;p&gt;为了能让server和业务程序完美地配合，&lt;a href=&quot;https://www.jcp.org/en/jsr/detail?id=316&quot;&gt;JavaEE规范&lt;/a&gt;同时规范了server标准（web container）和业务处理程序标准（Servlet-API），我们必须在规范下编写业务处理程序，否则server会“拒不运行”。&lt;/p&gt;

&lt;p&gt;我们所熟知的Servlet-API有Servlet、Filter和Listener。Servlet负责业务处理，Filter负责拦截请求，做前置处理，Listener负责监听容器内发生的事件（如启动、关闭、新增app范围内属性，新增session范围内属性等）。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Servlet中，可以操作&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html&quot;&gt;HttpServletRequest&lt;/a&gt;对象，这个对象由server封装并传输给Servlet的service方法，我们在service方法中实现业务时，可以直接使用它①来获得关于客户端请求的一切数据（url，参数，header，cookie，上传的文件）等等；还可以②在request中共享数据，以便于下一个处理者（可以是试图模板）进行后续处理。&lt;/p&gt;

&lt;p&gt;Servlet中，可以操作&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html&quot;&gt;HttpServletResponse&lt;/a&gt;对象，这个对象由server封装并传输给Servlet的service方法，我们在service方法中实现业务时，可以直接使用它①设置响应参数（如媒体类型、状态码等）②设置具体的响应内容③输出响应内容。&lt;/p&gt;

&lt;p&gt;Servlet中还有很多可以操作的对象，此处不赘述，参考&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/http/package-summary.html&quot;&gt;JavaEE-API的http包&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;web-mvc&quot;&gt;Web-MVC&lt;/h3&gt;

&lt;p&gt;Mvc并不是JavaEE的标准，是一种编程思想，旨在划清视图逻辑和业务逻辑。在Servlet中可以直接生成html视图，但是这样就违背了mvc原则。按照mvc原则，Servlet不应该考虑视图怎么展现，它只提供数据即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;model&quot;&gt;Model是什么&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Model就是上图中的DTO，俗称数据传输对象，它贯穿于多个层。&lt;/p&gt;

&lt;p&gt;不用框架也可以实现mvc，最典型的MVC就是JSP + servlet + javabean的模式。但有了框架更好。框架帮我们解决了很多问题，如数据绑定（含类型转换）、层次分割、标签、国际化支持等。&lt;/p&gt;

&lt;h4 id=&quot;struts&quot;&gt;Struts&lt;/h4&gt;
&lt;p&gt;Struts的第一代产品曾统领java世界的mvc框架，升级到第二代后仍是主流，但有没落的趋势。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一个请求在Struts2框架中的处理大概分为以下几个步骤:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;客户端初始化一个指向Servlet容器（例如Tomcat）的请求&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个请求经过一系列的过滤器（Filter）（这些过滤器中有一个叫做ActionContextCleanUp的可选过滤器，这个过滤器对于Struts2和其他框架的集成很有帮助，例如：SiteMesh Plugin）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;接着FilterDispatcher（现已过时）被调用，FilterDispatcher询问ActionMapper来决定这个请是否需要调用某个Action&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果ActionMapper决定需要调用某个Action，FilterDispatcher把请求的处理交给ActionProxy&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ActionProxy通过Configuration Manager询问框架的配置文件，找到需要调用的Action类&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ActionProxy创建一个ActionInvocation的实例。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ActionInvocation实例使用命名模式来调用，在调用Action的过程前后，涉及到相关拦截器（Intercepter）的调用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一旦Action执行完毕，ActionInvocation负责根据struts.xml中的配置找到对应的返回结果。返回结果通常是（但不总是，也可 能是另外的一个Action链）一个需要被表示的JSP或者FreeMarker的模版。在表示的过程中可以使用Struts2 框架中继承的标签。在这个过程中需要涉及到ActionMapper&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在上述过程中所有的对象（Action，Results，Interceptors，等）都是通过ObjectFactory来创建的。&lt;/p&gt;

&lt;h4 id=&quot;springmvc&quot;&gt;SpringMVC&lt;/h4&gt;
&lt;p&gt;通常我们说的&lt;a href=&quot;http://spring.io/&quot;&gt;spring&lt;/a&gt;是&lt;a href=&quot;http://projects.spring.io/spring-framework/&quot;&gt;spring-framework&lt;/a&gt;，其实spring还有不少其他的项目。Spring-framework提供：&lt;/p&gt;

&lt;p&gt;依赖注入、AOP面向切面编程、Spring Mvc web应用程序和RESTful web service框架、对持久层的支持等等。&lt;/p&gt;

&lt;p&gt;这里我们先了解SpringMvc——Spring web mvc框架围绕&lt;strong&gt;DispatcherServlet&lt;/strong&gt; 来工作，完成依据映射配置将请求分发到处理器（handler），解析视图、国际化与本地化、文件上传等工作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spring工作流程描述&lt;/strong&gt;
1. 用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获；&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息&lt;/p&gt;

&lt;p&gt;数据转换：对请求消息进行数据转换。如String转换成Integer、Double等&lt;/p&gt;

&lt;p&gt;数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等&lt;/p&gt;

&lt;p&gt;数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ViewResolver 结合Model和View，来渲染视图&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将渲染结果返回给客户端。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;mvc&quot;&gt;独特视角解读MVC&lt;/h4&gt;
&lt;p&gt;其实mvc框架的核心是改进Servlet，因为Servlet太low：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Servlet所有处理方法的参数都是容器给的，所以很难测试，必须先启动容器，很难用编程方式来进行测试（自己构造request等参数？好想法！）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不好测试，可以忍！request里面全部是字符串键值对，通常我们都要将若干个键值对封装成一个对象（领域数据模型、dto、vo很多名字），这个过程很痛苦①判断是否为空②类型转换（对象的属性可不都是String，还有int呢），处理转换的异常（123怎么转成Date类型）③新建对象并初始化其属性。几乎每个业务都要做这些重复动作——不好忍。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;基于以上两点，一个mvc框架必须定义自己的handler及映射方式，这个handler和servlet-api无关（官方说handler是pojo即普通java对象），这样好测试；必须通过某种方式在编写业务处理代码之前就做好数据绑定（简单来说就是把请求参数映射到数据模型对象上）并自动处理异常。&lt;/p&gt;

&lt;p&gt;Struts和spring都提供了xml和注解方式来配置请求到handler的映射。但数据绑定有些不同，struts将数据绑定到handler类的属性上，spring将请求绑定到handler类的方法上。因为一个handler有多个业务方法，这些业务方法未必共享同样的数据（类的属性），所以根据方法来绑定数据更加灵活、直观。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;如果再要概括点：①和servlet-api解耦便于测试②数据绑定减少繁琐的编码&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;基于业务层不干涉视图层的要求，handler中不应该出现任何关于视图渲染的代码，通常的做法是handler方法返回一个逻辑字符串（视图名），而视图的具体特性放在配置文件中，mvc框架必须提供逻辑视图名到实际视图的映射。这样做的好处在于，替换视图（特别是视图模板）不用修改handler的代码。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;视图模板不止有JSP，还有freemarker、velocity等很多模板语言，struts和spring都支持这三种模板。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;至于其他的，如数据验证、国际化、模板语言标签、el表达式等，都是附加值。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;springmvc-1&quot;&gt;推荐SpringMVC&lt;/h4&gt;
&lt;p&gt;SpringMVC3.0 Restful的风格终于回归了MVC框架的简单本质，对比之下Struts2概念太复杂更新又太懒了。SpringMVC的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让我们能非常简单的设计出干净的Web层和薄薄的Web层；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;进行更简洁的Web层的开发；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;天生与Spring框架集成（如IOC容器、AOP等）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提供强大的约定大于配置的契约式编程支持；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;能简单的进行Web层的单元测试；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持灵活的URL到页面控制器的映射；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;非常容易与其他视图技术集成，如Velocity、FreeMarker等等，因为模型数据不放在特定的API里，而是放在一个Model里（Map数据结构实现，因此很容易被其他框架使用）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;非常灵活的数据验证、格式化和数据绑定机制，能使用任何对象进行数据绑定，不必实现特定框架的API；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提供一套强大的JSP标签库，简化JSP开发；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持灵活的本地化、主题等解析；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更加简单的异常处理；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对静态资源的支持；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持Restful风格。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;视图模板&lt;/h3&gt;
&lt;p&gt;Web网页视图要动态起来，都采用“模板”这种概念，即静态模板部分+动态数据填空部分。JSP就是典型的模板语言，俗称在HTML（模板）中写Java代码（动态），但是为了让JSP好维护、易阅读，通常不在JSP里面写Java代码，而是用el表达式、标签等形式来做动态数据填空。&lt;/p&gt;

&lt;p&gt;类似的有freemarker、velocity，作用是类似的，当下比较流行freemarker：FreeMarker是一个用Java语言编写的模板引擎，它基于模板来生成文本输出。FreeMarker与Web容器无关，即在Web运行时，它并不知道Servlet或HTTP。它不仅可以用作表现层的实现技术，而且还可以用于生成HTML，XML，JSP等文本。SpringMVC中可以无缝集成Freemarker。其优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;不能编写java代码，可以实现严格的mvc分离。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;性能非常不错。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对jsp标签支持良好。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;内置大量常用功能，使用非常方便。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;宏定义（类似jsp标签）非常方便。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用表达式语言。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-5&quot;&gt;注意&lt;/h4&gt;

&lt;p&gt;要注意任何模板其背后都有一个引擎负责将其转换为html或别的文本，JSP虽然像HTML，但是浏览器并不会解析它（特别是其el及自定义标签部分），因为JSP不符合HTML标准。&lt;/p&gt;

&lt;p&gt;转换的时机在业务处理结束之后，mvc的视图解析器会调用对应的引擎生成文本，以io流形式写出，典型地，向浏览器发送html文本。&lt;/p&gt;

&lt;h3 id=&quot;restful-web-service-ajax&quot;&gt;Restful web service 和Ajax&lt;/h3&gt;
&lt;p&gt;#### 概念&lt;/p&gt;

&lt;p&gt;REST（REpresentation State Transfer）：表述性状态转移——不知道是什么鬼！&lt;/p&gt;

&lt;p&gt;它基于无状态、客户端-服务端结构、可缓存的通信协议——HTTP全中，在几乎所有情况下，使用HTTP协议。&lt;/p&gt;

&lt;p&gt;它是一种设计网络应用的架构风格和原则，不是具体的技术，也不是标准。&lt;/p&gt;

&lt;p&gt;它是RPC（Remote Procedure Calls）和web service（SOAP, WSDL, ……）的轻量级替换。&lt;/p&gt;

&lt;p&gt;REST web service要做到以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;平台无关&lt;/li&gt;
  &lt;li&gt;语言无关——C#可以访问Java实现的service&lt;/li&gt;
  &lt;li&gt;基于http&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;可以很容易地在防火墙的情况下被使用&lt;/p&gt;

    &lt;p&gt;– 如Web服务，REST没有提供内置的安全功能，加密，会话管理，QoS保证等，同时也如Web服务，这些都可以在HTTP之上添加：&lt;/p&gt;

    &lt;p&gt;–用户名/密码验证；&lt;/p&gt;

    &lt;p&gt;–基于https对内容进行加密。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-6&quot;&gt;解读&lt;/h4&gt;

&lt;p&gt;REST只注重服务端，用于提供服务，并不管客户端在什么平台，用什么技术，更不管客户端怎么渲染视图，所以我们之前做的项目都不是REST（我们的项目自己渲染视图，显然限定了客户端必须是浏览器）。&lt;/p&gt;

&lt;p&gt;REST基于HTTP，一个URL就是一个资源，这是JavaEE本身做到的，但是rest没有session，是设计的难点。&lt;/p&gt;

&lt;p&gt;REST也不推荐用cookie，REST中的ST代表“状态转送”，一个良好的REST设计的操作（请求）是自包含的，每个请求附带着（传送）服务器完成该请求所需的全部信息（状态）。&lt;/p&gt;

&lt;h4 id=&quot;restajax&quot;&gt;REST和AJAX&lt;/h4&gt;

&lt;p&gt;AJAX是非常受欢迎的web开发技术，使用js让页面更具有交互性。&lt;/p&gt;

&lt;p&gt;在AJAX中，使用XMLHttpRequest对象来向server发起请求，js代码使用响应的文本来动态地修改当前页面。&lt;/p&gt;

&lt;p&gt;AJAX应用被视为遵循REST概念，每个XMLHttpRequest视为一次REST请求，响应，通常是JSON，是最主流的REST响应格式。&lt;/p&gt;

&lt;h4 id=&quot;rest&quot;&gt;Rest的安全机制&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;判定用户是否已经登录：每次登录后,为用户生成一个唯一的随机token,客户端调用时,把token传过来(query params or header),服务器根据token找到对应的用户&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;access token 没过期的话，直接认为用户已登录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;access token 过期，有 refresh token 的话，使用 refresh token 来换取 access_token，成功的话就算登录成功，否则清除保存的 token，认为用户没有登录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;都没有的话，认为用户没有登录&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;如何对每一次 api 请求进行验证：客户端调用需要验证的接口记得传token&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务端与客户端通信时确保用户授权信息不被泄露：简单的方案就是采用https&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实web网站的session也是基于token实现的,只是token是写在cookies里,由web框架自动管理。&lt;/p&gt;

&lt;h3 id=&quot;web-1&quot;&gt;Web的安全&lt;/h3&gt;
&lt;p&gt;#### 合法性&lt;/p&gt;

&lt;p&gt;Web资源的安全必须考虑，通常保护资源的手段为认证（authentication）与授权（authorization），即身份验证和权限判断。如果某资源设定为受保护，那么访问者必须是本系统的用户，需要用户名密码进行验证，验证通过后还要比对该用户拥有的权限和本资源所需的权限是否一致。&lt;/p&gt;

&lt;p&gt;安全框架有：&lt;a href=&quot;http://shiro.apache.org/&quot;&gt;Apache Shiro&lt;/a&gt;和SpringSecurity。&lt;/p&gt;

&lt;h4 id=&quot;section-7&quot;&gt;传输的安全性&lt;/h4&gt;

&lt;p&gt;为保证数据在传输过程中的安全，需要对数据进行加密，此处需要了解&lt;a href=&quot;https://www.digicert.com/ssl.htm&quot;&gt;SSL&lt;/a&gt;和&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTPS&quot;&gt;HTTPS&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;业务层&lt;/h2&gt;

&lt;p&gt;业务层由于和业务相关，是属于项目核心部分，没有什么框架，但要注意两个问题①依赖②事务。&lt;/p&gt;

&lt;h3 id=&quot;springdidependency-injection-&quot;&gt;用spring完成di（dependency injection ）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;典型地，handler依赖service完成业务，service依赖dao完成数据持久化操作，用di来解除耦合是有必要的，这已经成为一种事实上的标准。&lt;/p&gt;

&lt;p&gt;Spring通过ioc容器来实现di，配置方式有xml和注解两种方式&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;事务控制应该架设在服务层上&lt;/h3&gt;

&lt;p&gt;如题！为什么呢？因为一个业务可能调用多个crud数据库操作，如果在dao层，就可能出现同一个业务部分成功部分失败的情况，为了保证一个service方法内的操作同成功同失败，事务应该定义在service的方法级别。&lt;/p&gt;

&lt;p&gt;事务的实现有编程式和声明式，编程式就是在代码中实现，声明式则是将AOP的环绕通知配置在切面（所有service的所有方面就组成了一个横向切面）上。&lt;/p&gt;

&lt;p&gt;Spring提供了强大的声明式事务，可以通过xml和注解方式实现。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;持久层&lt;/h2&gt;

&lt;p&gt;数据存储形式虽多（xml、其他文件、数据库），但开发中说的持久层往往特指数据库持久化技术。&lt;/p&gt;

&lt;h3 id=&quot;jdbc&quot;&gt;Jdbc&lt;/h3&gt;

&lt;p&gt;Jdbc是java给编程者提供的最基础的操作数据库的工具，但是太基础，无法接受数据对象作为sql参数，sql产出也不是对象或者对象集合（是类似二维数组的ResultSet）。&lt;/p&gt;

&lt;p&gt;因此才会有那么多著名的orm框架，连JavaEE规范都出了JPA-API。&lt;/p&gt;

&lt;h3 id=&quot;hibernatehttphibernateorgorm&quot;&gt;&lt;a href=&quot;http://hibernate.org/orm/&quot;&gt;Hibernate&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hibernate将实体对象与表的映射作为其基础配置，于其上设计了一个SQL引擎，对外公开了面向对象的持久化操作API，编程者调用这些API，会转入SQL引擎自动生成sql语句，底层仍然是调用jdbc来完成的。&lt;/p&gt;

&lt;h3 id=&quot;ibatishttpblogmybatisorg&quot;&gt;&lt;a href=&quot;http://blog.mybatis.org/&quot;&gt;iBatis&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iBatis最大的特点是，sql得编程人员自己写，框架帮你做连接的管理，提供操作命名sql（其实不是简单的命名sql，可以理解为配置了一个完整的Statement）的API，并可用java对象作为参数，将java对象作为返回值。&lt;/p&gt;

&lt;p&gt;简单地说，外在来看，iBatis解决了参数映射和结果映射的问题。&lt;/p&gt;

&lt;p&gt;可见iBatis是一个对jdbc轻量封装的框架。&lt;/p&gt;

&lt;h3 id=&quot;mybatis-and-mybatis-spring&quot;&gt;MyBatis and MyBatis-Spring&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/roadmap/fullstack11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MyBatis3有重大的突破，可以将Mapping File中的一个操作映射到一个方法，而整个Mapping File就和一个接口对应。神奇的是，我们并不需要实现这个接口，我们只需做好映射，框架会自动帮助我们实现（底层用代理模式），因此持久层的客户（如服务层）依赖Mapper Interface即可。&lt;/p&gt;

&lt;h3 id=&quot;druid&quot;&gt;数据库连接池: Druid&lt;/h3&gt;
&lt;p&gt;连接池的基本原理是批量初始化数据库连接并管理这些连接，当app不需要连接的时候，是回收而不是关闭，这样就提高了连接的利用率，减少了反复向数据库申请连接的高额开销。&lt;/p&gt;

&lt;p&gt;常用连接池实现有：&lt;a href=&quot;https://commons.apache.org/proper/commons-dbcp/&quot;&gt;DBCP&lt;/a&gt;、&lt;a href=&quot;http://www.mchange.com/projects/c3p0/&quot;&gt;C3P0&lt;/a&gt;以及阿里的&lt;a href=&quot;https://github.com/alibaba/druid&quot;&gt;druid&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;资源层&lt;/h2&gt;

&lt;p&gt;资源层主要指应用程序之外的资源，如服务器和数据库。&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;关系型数据库&lt;/h3&gt;

&lt;p&gt;Oracle，MySQL。&lt;/p&gt;

&lt;h3 id=&quot;nosql&quot;&gt;NOSQL数据库:&lt;/h3&gt;

&lt;p&gt;使用Nosql的大部分为对性能要求较高的应用。普通应用不需要使用Nosql数据库。如，MongoDb、redis等。&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;操作系统&lt;/h3&gt;

&lt;p&gt;开发随意。部署环境通常是Linux。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;核心支撑层及工具&lt;/h2&gt;

&lt;p&gt;这些东西不在哪一层上，可能每一层都要用，如日志组件、io工具包等。&lt;/p&gt;

&lt;h3 id=&quot;spring-iocaop&quot;&gt;Spring IOC及AOP&lt;/h3&gt;

&lt;p&gt;必备。&lt;/p&gt;

&lt;h4 id=&quot;cache&quot;&gt;Cache&lt;/h4&gt;

&lt;p&gt;普通应用不使用缓存，小型缓存使用&lt;a href=&quot;http://ehcache.org/&quot;&gt;Ehcache&lt;/a&gt;，大型缓存使用&lt;a href=&quot;http://memcached.org/&quot;&gt;Memcached&lt;/a&gt;或&lt;a href=&quot;http://redis.io/&quot;&gt;Redis&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;schedule-quartzhttpquartz-schedulerorg&quot;&gt;Schedule： &lt;a href=&quot;http://quartz-scheduler.org/&quot;&gt;Quartz&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;generalapache-commons-langhttpcommonsapacheorglangapache-commons-iohttpcommonsapacheorgioguavahttpcodegooglecompguava-libraries&quot;&gt;General：&lt;a href=&quot;http://commons.apache.org/lang/&quot;&gt;Apache Commons Lang&lt;/a&gt;，&lt;a href=&quot;http://commons.apache.org/io/&quot;&gt;Apache Commons IO&lt;/a&gt;，&lt;a href=&quot;http://code.google.com/p/guava-libraries/&quot;&gt;Guava&lt;/a&gt;。&lt;/h4&gt;

&lt;h4 id=&quot;xml-dom4jjdom&quot;&gt;XML： DOM4J、jdom。&lt;/h4&gt;

&lt;h4 id=&quot;jsonhttpwwwjsonorg&quot;&gt;&lt;a href=&quot;http://www.json.org/&quot;&gt;JSON&lt;/a&gt;：&lt;/h4&gt;

&lt;p&gt;GSon虽然系出名门而且接口优雅，但&lt;a href=&quot;http://jackson.codehaus.org/&quot;&gt;Jackson&lt;/a&gt;的功能更加丰富到匪夷所思，而且比GSon快很多。&lt;/p&gt;

&lt;h4 id=&quot;logging&quot;&gt;Logging:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slf4j.org/&quot;&gt;Slf4j&lt;/a&gt; + Logback。&lt;/p&gt;

&lt;p&gt;用&lt;a href=&quot;http://code.google.com/p/log4jdbc/&quot;&gt;Log4jdbc&lt;/a&gt;在开发时查看实际执行的SQL。&lt;/p&gt;

&lt;h4 id=&quot;unit-test-junithttpwwwjunitorg&quot;&gt;Unit Test： &lt;a href=&quot;http://www.junit.org/&quot;&gt;JUnit&lt;/a&gt;。&lt;/h4&gt;

&lt;h2 id=&quot;section-15&quot;&gt;开发环境&lt;/h2&gt;

&lt;p&gt;首选eclipse。&lt;/p&gt;

&lt;p&gt;用&lt;a href=&quot;http://maven.apache.org/&quot;&gt;Maven&lt;/a&gt;，在项目构建脚本不复杂的时候的首选，gradle也可以.&lt;/p&gt;

&lt;p&gt;Git或者svn做版本控制&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sonarsource.org/&quot;&gt;Sonar&lt;/a&gt;做代码质量检查。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>windows上搭建Java开发环境</title>
        <link>https://lanqiao2016.github.io/2016/07/30/windows-install.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/30/windows-install.html</guid>
        <pubDate>Sat, 30 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;windowsjava&quot;&gt;windows上搭建Java开发环境&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;1.下载&lt;/h2&gt;

&lt;p&gt;搭建Java开发环境，第一步我们就需要安装JDK。大家可以在ORACLE官方网站上下载，下载路径：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里要提醒各位同学，不同平台和系统的安装文件是不一样的，根据自己电脑的情况选着合适的版本进行安装,32位选x86，64位选择x64。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2.安装&lt;/h2&gt;

&lt;p&gt;下载后JDK的安装根据提示进行，还有安装JDK的时候也会安装JRE，一并安装就可以了。
安装JDK，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为 C:\Program Files (x86)\Java\jdk1.8.0_91。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;3.配置环境变量&lt;/h2&gt;
&lt;p&gt;当我们安装好JDK后，就要配置环境变量了。一般来说，我们会配置这三个环境变量：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JAVA_HOME ：配置 JDK 安装路径&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PATH ：配置 JDK 命令文件的位置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CLASSPATH ：配置类库文件的位置&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;详细步骤：&lt;/h3&gt;

&lt;p&gt;右击”我的电脑”，点击”属性”，选择”高级系统设置”；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;选择”高级”选项卡，点击”环境变量”；&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后就会出现如下图所示的画面：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在”系统变量”中设置3项属性，JAVA_HOME,PATH,CLASSPATH(大小写无所谓),若已存在则点击”编辑”，不存在则点击”新建”。&lt;/p&gt;

&lt;p&gt;变量设置参数如下：&lt;/p&gt;

&lt;p&gt;变量名：JAVA_HOME&lt;/p&gt;

&lt;p&gt;变量值：C:\Program Files (x86)\Java\jdk1.8.0_91        // 要根据自己的实际&lt;/p&gt;

&lt;p&gt;变量名：CLASSPATH&lt;/p&gt;

&lt;p&gt;变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;         //记得前面有个”.”&lt;/p&gt;

&lt;p&gt;变量名：Path  &lt;strong&gt;一般已经存在，点击编辑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;&lt;/p&gt;

&lt;p&gt;JAVA_HOME 设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.10.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;PATH设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.13.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CLASSPATH 设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.14.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;注意：如果使用1.5以上版本的JDK，不用设置CLASSPATH环境变量，也可以正常编译和运行Java程序。&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;jdk&quot;&gt;4.测试JDK是否安装成功&lt;/h2&gt;

&lt;p&gt;1、”开始”-&amp;gt;”运行”，键入”cmd”；&lt;/p&gt;

&lt;p&gt;2、键入命令: java -version、java、javac 几个命令，出现正常提示信息，说明环境变量配置成功；&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Shiro及安全基本概念</title>
        <link>https://lanqiao2016.github.io/2016/07/29/shiro-concept.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/29/shiro-concept.html</guid>
        <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;shiro是一个强大灵活的开源安全框架，可以干净利落的处理认证、授权、企业会话管理和加密。&lt;/p&gt;

&lt;p&gt;shiro的首要目标是简单和易于理解。安全有时候是非常复杂令人头疼的问题，shiro隐藏了复杂
的细节，暴露了简介直观的API来简化开发者使他们的应用程序更安全的努力。&lt;/p&gt;

&lt;p&gt;shiro可以做一下事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;进行用户认证&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行访问控制&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;单点登录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remember Me服务&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;安全的一些概念：身份认证、授权、会话管理、加密被认为是构成应用安全的基础要素。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;身份认证，就是验证用户身份，典型的“登录”过程就是身份认证的过程。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;授权：也就是访问控制（ac），也即某用户可以可以使用应用的哪些功能？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;会话管理：管理用户特定的会话，即使在非Web或EJB应用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加密：保持数据的安全使用的加密算法，同时仍然易于使用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于Session，在WEB应用中它基于HttpSession，而一般应用中默认使用企业会话管理。shiro的Session用起来和HttpSession差不多，并且使用它不需要Http环境。&lt;/p&gt;

&lt;p&gt;在最高的层次上讲，shiro主要有三个主要的概念，它们分别是Subject、SecurityManager和Realms。&lt;/p&gt;

&lt;p&gt;shiro使用Subject这一概念来描述当前用户，‘User’这个词通常隐含的指一个人，但是Subject可以是一个人也可以代表第三方服务，守护账户，定时作业，或者其他类似的与软件交互的事物。&lt;/p&gt;

&lt;p&gt;所有Subject实例都与一个SecurityManager绑定，当你和一个Subject交互时，所有交互都会通过SecurityManager转换为特定Subject的交互。&lt;/p&gt;

&lt;p&gt;SecurityManager是shiro架构的核心，它扮演‘保护伞’对象的角色，与其他内部安全组件一起构成对象图的核心。&lt;/p&gt;

&lt;p&gt;SecurityManager及其内贸部对象图一旦被应用配置，它基本上就被放在一边不再被程序员使用了，开发人员基本上总是在与Subject的相关API打交道。它在幕后支持Subject的安全操作。&lt;/p&gt;

&lt;p&gt;Realms在shiro与你的应用程序的安全数据之间充当着桥梁或者说是连接器的作用。从这种意义上讲，Reaml就是一个特定的安全DAO，它为shiro提供所需的数据。在配置shiro时，你必须为认证、授权指定至少一个可用的Realm。&lt;/p&gt;

&lt;p&gt;shiro提供了现成的Realm连接到LDAP、关系数据库（JDBC）、ini和properties文件等。用户可以使用自己的Realm。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>认识Java</title>
        <link>https://lanqiao2016.github.io/2016/07/29/introduction.html</link>
        <guid isPermaLink="true">https://lanqiao2016.github.io/2016/07/29/introduction.html</guid>
        <pubDate>Fri, 29 Jul 2016 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;java&quot;&gt;认识Java&lt;/h1&gt;
&lt;p&gt;本文将介绍 Java 体系和 Java 的核心概念：JVM、JDK、JRE。同时我们会学到如何在 windows 系统中搭建 Java 开发环境，以及如何利用第三方工具进行 Java 程序的开发。并且在这一章里我们会先接触 Java 的第一个程序 Hello World！让我们一起进入 Java 语言的神奇世界吧！&lt;/p&gt;

&lt;h2 id=&quot;java--&quot;&gt;Java 简介 [了解]&lt;/h2&gt;
&lt;p&gt;Java 是一种面向对象的语言。于1995年，由 Sun 公司出品。虽然 Java 仅仅只产生了短短20年，但是它的发展是非常迅速的。在2009年4月20号，ORACLE 收购了 Sun 公司，也就是说 Java 这门语言现在归属于 ORACLE 这家公司门下。&lt;/p&gt;

&lt;p&gt;在 Java 这门语言体系当中，最基础的部分就是 Java SE 部分，Java 的标准版本。它包括Java最基础的一些结构，包括面向对象的一些特性等等，同时它也是 Java 技术基础和核心。在 Java SE 的基础之上，又分为了 Java EE（Java 的企业版），应用于大型企业级应用的开发。Java ME 主要用于嵌入式开发。&lt;/p&gt;

&lt;p&gt;Java的三个体系：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;java-1&quot;&gt;Java语言的特点[了解]&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;简洁有效&lt;/li&gt;
  &lt;li&gt;可移植性&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;解释型&lt;/li&gt;
  &lt;li&gt;适合分布式计算&lt;/li&gt;
  &lt;li&gt;拥有较好的性能&lt;/li&gt;
  &lt;li&gt;健壮、防患于未然&lt;/li&gt;
  &lt;li&gt;具有多线程处理能力&lt;/li&gt;
  &lt;li&gt;具有较高的安全性&lt;/li&gt;
  &lt;li&gt;是一种动态语言&lt;/li&gt;
  &lt;li&gt;是一种中性结构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不详细解释，这些特性最好是学完java之后再回过头来深入探索和总结。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;基本工作原理【掌握】&lt;/h2&gt;
&lt;p&gt;在Java编程语言中，所有源码最初都用普通文本书写，并保存在后缀为.java的文本文件中。&lt;/p&gt;

&lt;p&gt;进一步，源码文件被编译为.class文件——使用“编译器（Java Compiler）”。&lt;/p&gt;

&lt;p&gt;.class文件并不能被处理器（CPU）直接处理——它是java虚拟机（JVM）的机器语言。&lt;/p&gt;

&lt;p&gt;Java需要启动一个JVM实例来装载和运行.class文件中的字节码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为虚拟机在不同操作系统上有不同的版本，所以.class文件可以在不同操作系统平台上被解释执行，换句话说，通过虚拟机同一个应用程序可以在不同的操作系统平台上运行，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;javajava-platform&quot;&gt;Java平台（Java Platform）&lt;/h2&gt;
&lt;p&gt;Java平台是只有软件的平台，它运行在硬件平台之上。包含两部分内容：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java虚拟机&lt;/li&gt;
  &lt;li&gt;Java API（application Programming Interface）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虚拟机的作用，前面有简单介绍；
API是一组庞大的构建好的组件的集合，它提供基础的、非常有用的功能，可以被应用程序直接使用。在Java中，这些组件是一个个的类（.class），他们按相关性被划分到不同的包（package）中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/Java8/1.4.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;jdkjrejvm&quot;&gt;JDK、JRE与JVM&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JDK&lt;/strong&gt; 叫 Java 开发工具包，基本功能是编译Java源码，对应命令为javac
&lt;strong&gt;JRE&lt;/strong&gt; 叫 Java 运行环境，基本功能是启动虚拟机，对应命令为java
&lt;strong&gt;JVM&lt;/strong&gt; 叫 Java 虚拟机，是运行java程序的程序&lt;/p&gt;

&lt;p&gt;以上三部分都可以通过安装JDK一次性获得。&lt;/p&gt;

</description>
      </item>
    
  </channel>
</rss>